import customtkinter as ctk
import json
import sqlite3
import requests
from pathlib import Path
import os
from PIL import Image, ImageTk
from database.db_handler import DatabaseHandler
from utils.api_handler import FactAPI
import random

# Theme Colors
DARK_BLUE = "#1B2838"
LIGHT_BLUE = "#66C0F4"
ACCENT_BLUE = "#1E3F66"
WHITE = "#FFFFFF"
GRAY = "#707070"
GRADIENT_DARK = "#1a237e"
GRADIENT_LIGHT = "#4a148c"
BUTTON_ACTIVE = "#3498db"
HIGHLIGHT_COLOR = "#FF6B6B"  # Coral color for highlights
SUCCESS_GREEN = "#2ecc71"
WARNING_YELLOW = "#f1c40f"
GRADIENT_START = "#1a237e"
GRADIENT_END = "#4a148c"

# Update the color scheme
DARK_BG = "#0A1929"  # Darker blue background
CARD_BG = "#132F4C"  # Lighter blue for cards
ACCENT_PURPLE = "#9C27B0"  # Purple accent
ACCENT_ORANGE = "#FF9800"  # Orange accent
TEXT_WHITE = "#FFFFFF"
TEXT_GRAY = "#B2BAC2"
BUTTON_HOVER = "#6B57FF"

# Update button style configuration
button_style = {
    "corner_radius": 12,
    "border_width": 0,
    "fg_color": ACCENT_PURPLE,
    "hover_color": BUTTON_HOVER,
    "font": ("Roboto", 14, "bold"),
    "height": 40
}

# Update card style configuration
card_style = {
    "corner_radius": 15,
    "fg_color": CARD_BG,
    "border_width": 1,
    "border_color": "#1E4976"
}

class FactFinderApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # Window setup
        self.title("Fact Finder Assistant")
        self.geometry("1200x800")
        self.configure(fg_color=DARK_BLUE)
        
        # State variables
        self.is_fullscreen = False
        self.current_view = None
        self.facts_viewed = 0  # Add this line
        self.favorite_facts = set()  # Store unique facts
        
        # Configure grid
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # Create frames
        self.create_sidebar()
        self.create_main_content()
        self.create_right_panel()
        
        # Load settings
        self.load_settings()
        
        # Show home by default
        self.show_home()
        
        # Bind keyboard shortcuts
        self.bind("<F11>", lambda event: self.toggle_fullscreen())
        self.bind("<Escape>", lambda event: self.exit_fullscreen())

        self.db = DatabaseHandler()
        self.api = FactAPI()

    def create_sidebar(self):
        self.sidebar = ctk.CTkFrame(self, fg_color=DARK_BG, width=250, corner_radius=0)
        self.sidebar.grid(row=0, column=0, sticky="nsew", padx=0, pady=0)
        self.sidebar.grid_propagate(False)
        
        # App logo/title with new styling
        self.logo_label = ctk.CTkLabel(
            self.sidebar, 
            text="FACT FINDER",
            font=("Roboto", 24, "bold"),
            text_color=TEXT_WHITE
        )
        self.logo_label.pack(pady=30, padx=20)
        
        buttons = [
            ("üè†  Home", self.show_home),
            ("üé≤  Facts", self.show_facts),
            ("üìä  Statistics", self.show_stats),
            ("‚öôÔ∏è  Settings", self.show_settings)
        ]
        
        # Create a modified button style for sidebar buttons
        sidebar_button_style = button_style.copy()
        sidebar_button_style.update({
            "fg_color": "transparent",
            "text_color": TEXT_WHITE,
            "anchor": "w",
            "hover_color": CARD_BG
        })
        
        for text, command in buttons:
            btn = ctk.CTkButton(
                self.sidebar,
                text=text,
                command=command,
                **sidebar_button_style
            )
            btn.pack(pady=5, padx=20, fill="x")

    def create_main_content(self):
        # Main content area
        self.main_frame = ctk.CTkFrame(self, fg_color=DARK_BLUE, corner_radius=0)
        self.main_frame.grid(row=0, column=1, sticky="nsew", padx=20, pady=20)
        
        # Fact display area
        self.fact_frame = ctk.CTkFrame(
            self.main_frame,
            fg_color=ACCENT_BLUE,
            corner_radius=10
        )
        self.fact_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Fact text
        self.fact_label = ctk.CTkLabel(
            self.fact_frame,
            text="Select a country to get interesting facts!",
            font=("Roboto", 16),
            text_color=WHITE,
            wraplength=500
        )
        self.fact_label.pack(pady=20, padx=20)

    def create_right_panel(self):
        # Right panel for additional controls
        self.right_panel = ctk.CTkFrame(self, fg_color=ACCENT_BLUE, width=250, corner_radius=0)
        self.right_panel.grid(row=0, column=2, sticky="nsew", padx=0, pady=0)
        self.right_panel.grid_propagate(False)
        
        # Country selection
        self.country_label = ctk.CTkLabel(
            self.right_panel,
            text="Select Country:",
            font=("Roboto", 14, "bold"),
            text_color=WHITE
        )
        self.country_label.pack(pady=(20,5), padx=10)
        
        self.country_var = ctk.StringVar(value="Select a country")
        self.country_dropdown = ctk.CTkOptionMenu(
            self.right_panel,
            values=["USA", "UK", "Canada", "Australia", "Germany"],
            variable=self.country_var,
            command=self.on_country_select
        )
        self.country_dropdown.pack(pady=5, padx=10)
        
        # Fact type selection
        self.type_label = ctk.CTkLabel(
            self.right_panel,
            text="Fact Type:",
            font=("Roboto", 14, "bold"),
            text_color=WHITE
        )
        self.type_label.pack(pady=(20,5), padx=10)
        
        self.fact_types = ["History", "Mathematics", "Science", "Culture"]
        for fact_type in self.fact_types:
            cb = ctk.CTkCheckBox(
                self.right_panel,
                text=fact_type,
                text_color=WHITE,
                fg_color=LIGHT_BLUE
            )
            cb.pack(pady=5, padx=10)

        # Add a search box
        self.search_frame = ctk.CTkFrame(self.right_panel, fg_color="transparent")
        self.search_frame.pack(pady=10, padx=10, fill="x")
        
        self.search_entry = ctk.CTkEntry(
            self.search_frame,
            placeholder_text="üîç Search facts...",
            height=35,
            font=("Roboto", 12)
        )
        self.search_entry.pack(fill="x", pady=5)
        
        # Add favorite facts section
        self.favorites_label = ctk.CTkLabel(
            self.right_panel,
            text="‚≠ê Favorite Facts",
            font=("Roboto", 14, "bold"),
            text_color=WHITE
        )
        self.favorites_label.pack(pady=(20,5), padx=10)
        
        self.favorites_frame = ctk.CTkFrame(self.right_panel, fg_color=DARK_BLUE)
        self.favorites_frame.pack(pady=5, padx=10, fill="both", expand=True)
        
        # Add fact counter
        self.counter_frame = ctk.CTkFrame(self.right_panel, fg_color=GRADIENT_START)
        self.counter_frame.pack(pady=10, padx=10, fill="x", side="bottom")
        
        self.fact_counter = ctk.CTkLabel(
            self.counter_frame,
            text="Facts viewed: 0",
            font=("Roboto", 12),
            text_color=WHITE
        )
        self.fact_counter.pack(pady=5)

    def load_settings(self):
        # Load user settings from JSON file
        settings_file = Path("settings.json")
        if (settings_file.exists()):
            with open(settings_file, "r") as f:
                self.settings = json.load(f)
        else:
            self.settings = {
                "theme": "dark",
                "language": "en",
                "last_country": None
            }
    
    def show_home(self):
        self.clear_main_frame()
        self.current_view = "home"
        
        welcome_label = ctk.CTkLabel(
            self.fact_frame,
            text="Welcome to Fact Finder!",
            font=("Roboto", 24, "bold"),
            text_color=WHITE
        )
        welcome_label.pack(pady=(50, 20))
        
        info_text = "Select a country from the right panel to discover interesting facts.\n\n" \
                   "You can filter facts by category using the checkboxes."
        
        info_label = ctk.CTkLabel(
            self.fact_frame,
            text=info_text,
            font=("Roboto", 16),
            text_color=WHITE,
            wraplength=500
        )
        info_label.pack(pady=20)

    def show_facts(self):
        self.clear_main_frame()
        self.current_view = "facts"
        
        # Create a gradient-style header
        header_frame = ctk.CTkFrame(self.fact_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20, 30))
        
        header_label = ctk.CTkLabel(
            header_frame,
            text="‚ú® Discover Amazing Facts",
            font=("Roboto", 28, "bold"),
            text_color=WHITE
        )
        header_label.pack(side="left")
        
        # Create a container for the fact categories
        categories_frame = ctk.CTkFrame(self.fact_frame, fg_color="transparent")
        categories_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Define fact categories with icons and descriptions
        categories = {
            "üåç Countries": "Get facts about specific countries",
            "üè∫ History": "Historical events and moments",
            "üî¢ Mathematics": "Numbers and mathematical concepts",
            "üß¨ Science": "Scientific discoveries and phenomena",
            "üé≤ Random": "Random interesting facts"
        }
        
        # Create frame style for categories without duplicating properties
        category_frame_style = {
            "fg_color": CARD_BG,
            "border_width": card_style["border_width"],
            "border_color": card_style["border_color"],
            "corner_radius": 10
        }
        
        for category, description in categories.items():
            # Create category frame with the correct style
            category_frame = ctk.CTkFrame(
                categories_frame,
                **category_frame_style
            )
            category_frame.pack(fill="x", pady=10, padx=20)
            
            # Create left side container for icon and category
            left_container = ctk.CTkFrame(category_frame, fg_color="transparent")
            left_container.pack(side="left", padx=20, pady=15, fill="x", expand=True)
            
            category_label = ctk.CTkLabel(
                left_container,
                text=category,
                font=("Roboto", 20, "bold"),
                text_color=TEXT_WHITE
            )
            category_label.pack(side="left")
            
            description_label = ctk.CTkLabel(
                left_container,
                text=description,
                font=("Roboto", 14),
                text_color=TEXT_GRAY,
                wraplength=400
            )
            description_label.pack(side="left", padx=(20, 0))
            
            # Create generate button
            generate_btn = ctk.CTkButton(
                category_frame,
                text="Generate",
                command=lambda cat=category.split()[1]: self.generate_fact(cat),
                width=120,
                **button_style
            )
            generate_btn.pack(side="right", padx=20)

    def show_stats(self):
        self.clear_main_frame()
        self.current_view = "stats"
        
        stats_label = ctk.CTkLabel(
            self.fact_frame,
            text="Statistics",
            font=("Roboto", 24, "bold"),
            text_color=WHITE
        )
        stats_label.pack(pady=(50, 20))
        
        stats_text = "Here you can see your statistics.\n\n" \
                     "Facts viewed: {}\n\n" \
                     "Favorite facts: {}".format(self.facts_viewed, len(self.favorite_facts))
        
        stats_info_label = ctk.CTkLabel(
            self.fact_frame,
            text=stats_text,
            font=("Roboto", 16),
            text_color=WHITE,
            wraplength=500
        )
        stats_info_label.pack(pady=20)

    def show_settings(self):
        self.clear_main_frame()
        self.current_view = "settings"
        
        settings_label = ctk.CTkLabel(
            self.fact_frame,
            text="Settings",
            font=("Roboto", 24, "bold"),
            text_color=WHITE
        )
        settings_label.pack(pady=(50, 20))
        
        theme_label = ctk.CTkLabel(
            self.fact_frame,
            text="Theme:",
            font=("Roboto", 16),
            text_color=WHITE
        )
        theme_label.pack(pady=(20, 5))
        
        self.theme_var = ctk.StringVar(value=self.settings.get("theme", "dark"))
        theme_options = ["dark", "light"]
        self.theme_dropdown = ctk.CTkOptionMenu(
            self.fact_frame,
            values=theme_options,
            variable=self.theme_var,
            command=self.on_theme_change
        )
        self.theme_dropdown.pack(pady=5)
        
        language_label = ctk.CTkLabel(
            self.fact_frame,
            text="Language:",
            font=("Roboto", 16),
            text_color=WHITE
        )
        language_label.pack(pady=(20, 5))
        
        self.language_var = ctk.StringVar(value=self.settings.get("language", "en"))
        language_options = ["en", "es", "fr", "de"]
        self.language_dropdown = ctk.CTkOptionMenu(
            self.fact_frame,
            values=language_options,
            variable=self.language_var,
            command=self.on_language_change
        )
        self.language_dropdown.pack(pady=5)

    def clear_main_frame(self):
        for widget in self.fact_frame.winfo_children():
            widget.destroy()

    def on_country_select(self, country):
        self.clear_main_frame()
        self.current_view = "facts"
        
        loading_frame = ctk.CTkFrame(self.fact_frame, fg_color="transparent")
        loading_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        loading_label = ctk.CTkLabel(
            loading_frame,
            text="Loading facts...",
            font=("Roboto", 16),
            text_color=WHITE
        )
        loading_label.pack(pady=20)
        
        self.after(1000, lambda: self._display_generated_fact("country", loading_frame, country))

    def _display_generated_fact(self, category, loading_frame, country=None):
        loading_frame.destroy()
        
        try:
            # Get fact based on category
            if category.lower() == "random":
                categories = ["History", "Mathematics", "Science"]
                category = random.choice(categories)
            
            if category.lower() in ["history", "countries"]:
                fact_data = self.api.get_history_fact(country)
            elif category.lower() == "mathematics":
                fact_data = self.api.get_math_fact()
            elif category.lower() == "science":
                fact_data = self.api.get_trivia_fact("Science")
            else:
                fact_data = self.api.get_trivia_fact("Science")  # Default to science
            
            # Update fact counter
            self.facts_viewed += 1
            self.fact_counter.configure(text=f"Facts viewed: {self.facts_viewed}")
            
            # Create modern card design
            fact_card = ctk.CTkFrame(self.fact_frame, **card_style)
            fact_card.pack(expand=True, fill="both", padx=40, pady=40)
            
            # Category badge
            badge_style = button_style.copy()
            badge_style["height"] = 32
            category_badge = ctk.CTkButton(
                fact_card,
                text=category.title(),
                width=100,
                **badge_style
            )
            category_badge.pack(pady=(20, 10), padx=20)
            
            # Fact text
            fact_label = ctk.CTkLabel(
                fact_card,
                text=fact_data["fact"],
                font=("Roboto", 16),
                text_color=WHITE,
                wraplength=600
            )
            fact_label.pack(pady=20, padx=40)
            
            # Action buttons frame
            action_frame = ctk.CTkFrame(fact_card, fg_color="transparent")
            action_frame.pack(fill="x", padx=20, pady=(0, 20))
            
            # Left side - source
            source_label = ctk.CTkLabel(
                action_frame,
                text=f"üìö Source: {fact_data['source']}",
                font=("Roboto", 12),
                text_color=TEXT_GRAY
            )
            source_label.pack(side="left", padx=20)
            
            # Right side - buttons
            buttons_frame = ctk.CTkFrame(action_frame, fg_color="transparent")
            buttons_frame.pack(side="right", padx=20)
            
            # Favorite button
            favorite_btn = ctk.CTkButton(
                buttons_frame,
                text="‚≠ê Add to Favorites",
                command=lambda: self.add_to_favorites(fact_data),
                **button_style
            )
            favorite_btn.pack(side="left", padx=5)
            
            # Generate another button
            generate_btn = ctk.CTkButton(
                buttons_frame,
                text="üîÑ Generate Another",
                command=lambda: self.generate_fact(category),
                **button_style
            )
            generate_btn.pack(side="left", padx=5)
            
        except Exception as e:
            error_frame = ctk.CTkFrame(self.fact_frame, fg_color=CARD_BG)
            error_frame.pack(expand=True, fill="both", padx=40, pady=40)
            
            error_label = ctk.CTkLabel(
                error_frame,
                text="‚ö†Ô∏è Unable to generate fact",
                font=("Roboto", 20, "bold"),
                text_color=HIGHLIGHT_COLOR
            )
            error_label.pack(pady=(40, 10))
            
            retry_btn = ctk.CTkButton(
                error_frame,
                text="üîÑ Try Again",
                command=lambda: self.generate_fact(category),
                **button_style
            )
            retry_btn.pack(pady=(10, 40))

    def add_to_favorites(self, fact_text):
        if fact_text not in self.favorite_facts:
            self.favorite_facts.add(fact_text)
            favorite_label = ctk.CTkLabel(
                self.favorites_frame,
                text=fact_text,
                font=("Roboto", 12),
                text_color=WHITE,
                wraplength=200
            )
            favorite_label.pack(pady=5, padx=5)

    def toggle_fullscreen(self):
        self.is_fullscreen = not self.is_fullscreen
        self.attributes("-fullscreen", self.is_fullscreen)

    def exit_fullscreen(self):
        self.is_fullscreen = False
        self.attributes("-fullscreen", False)

    def on_theme_change(self, theme):
        self.settings["theme"] = theme
        self.save_settings()

    def on_language_change(self, language):
        self.settings["language"] = language
        self.save_settings()

    def save_settings(self):
        with open("settings.json", "w") as f:
            json.dump(self.settings, f, indent=4)

    # Add this method to the FactFinderApp class
    def generate_fact(self, category):
        self.clear_main_frame()
        
        # Show loading animation
        loading_frame = ctk.CTkFrame(self.fact_frame, fg_color="transparent")
        loading_frame.pack(expand=True, fill="both")
        
        loading_label = ctk.CTkLabel(
            loading_frame,
            text="üîÑ Generating fact...",
            font=("Roboto", 16),
            text_color=WHITE
        )
        loading_label.pack(expand=True)
        
        # Use after to simulate loading and get fact
        self.after(800, lambda: self._display_generated_fact(category, loading_frame))
        
        # Update fact counter
        self.facts_viewed += 1
        self.fact_counter.configure(text=f"Facts viewed: {self.facts_viewed}")

if __name__ == "__main__":
    app = FactFinderApp()
    app.mainloop()
